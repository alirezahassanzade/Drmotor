from django.db import models

CHARFIELD_MAXLENGTH = 50


class UserStatus(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)


class Address(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    Country = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    City = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    Region = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    Details = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # TODO: Check if max length is OK
    PostalCode = models.CharField(max_length=10)
    # TODO: Change max length of Latitude & Longitude according to the range
    Latitude = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    Longitude = models.CharField(max_length=CHARFIELD_MAXLENGTH)


class UserType(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)

# TODO: Multi address on profile

class User(models.Model):
    FirstName = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    LastName = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    DateOfBirth = models.DateField(auto_now=False, auto_now_add=False, null=True, blank=True)
    IdentificationCode = models.CharField(max_length=10, null=True, blank=True)
    # PhoneNumber must be like (0)xxxxxxxxxx where 0 is excluded:
    PhoneNumber = models.CharField(max_length=10)
    # TelephoneNumber must be like (0)xxxxxxxxxx where 0 is excluded
    TelephoneNumber = models.CharField(max_length=10, null=True, blank=True)
    Email = models.EmailField(max_length=254, null=True, blank=True)
    JoinedDate = models.DateTimeField(auto_now=False, auto_now_add=True)
    # TODO: add upload_to argument
    Picture = models.ImageField(upload_to='', null=True, blank=True)
    Vote = models.PositiveSmallIntegerField(null=True, blank=True)
    # Maximum amount of wallet is 10^9 + 3 decimal places
    Wallet = models.DecimalField(max_digits=13, decimal_places=3)
    Status = models.ForeignKey(UserStatus, on_delete=models.SET_NULL, null=True)
    Address = models.ForeignKey(Address, on_delete=models.SET_NULL, null=True)
    Type = models.ForeignKey(UserType, on_delete=models.SET_NULL, null=True)
    Password = models.CharField(max_length=CHARFIELD_MAXLENGTH)


class MotorType(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)


class Motor(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    LicensePlate = models.CharField(max_length=8)
    Type = models.ForeignKey(MotorType, on_delete=models.SET_NULL, null=True)
    Owner = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)


class TransactionType(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)


class TransactionStatus(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)


class Transaction(models.Model):
    # Maximum amount of wallet is 10^9 + 3 decimal places
    Price = models.DecimalField(max_digits=13, decimal_places=3)
    Time = models.DateTimeField(auto_now=False, auto_now_add=True)
    BankName = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # TODO: Check if maximum length of CardNumber is fine
    CardNumber = models.CharField(max_length=16)
    RefrenceNumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    IssueNumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    TerminalNumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # The following number will be randomly generated by our sevice
    TransactionNumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    User = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    Type = models.ForeignKey(TransactionType, on_delete=models.SET_NULL, null=True)
    Status = models.ForeignKey(TransactionStatus, on_delete=models.SET_NULL, null=True)


class Good(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # Maximum amount of wallet is 10^9 + 3 decimal places
    Price = models.DecimalField(max_digits=13, decimal_places=3)
    Vote = models.PositiveSmallIntegerField()
    Description = models.TextField()

    def __str__(self):
        return self.Title


class Request(models.Model):
    # StartDate will automatically set when an instance is created
    StartDate = models.DateTimeField(auto_now=False, auto_now_add=True, blank=True, null=True)
    EndDate = models.DateTimeField(auto_now=False, auto_now_add=True, blank=True, null=True)
    Description = models.TextField()
    # Maximum amount of wallet is 10^9 + 3 decimal places
    TotalPrice = models.DecimalField(max_digits=13, decimal_places=3, blank=True, null=True)
    Address = models.ForeignKey(Address, on_delete=models.SET_NULL, null=True, blank=True)
    Mechanic = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    Motor = models.ForeignKey(Motor, on_delete=models.SET_NULL, null=True, blank=True)


class RequestGood(models.Model):
    Request = models.ForeignKey(Request, on_delete=models.SET_NULL, null=True)
    Good = models.ForeignKey(Good, on_delete=models.SET_NULL, null=True)


class Service(models.Model):
    Title = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # Maximum amount of wallet is 10^9 + 3 decimal places
    Price = models.DecimalField(max_digits=13, decimal_places=3)
    # TODO: add field "available on" in order to specify motor type
    Description = models.TextField()


class RequestService(models.Model):
    Request = models.ForeignKey(Request, on_delete=models.SET_NULL, null=True)
    Service = models.ForeignKey(Service, on_delete=models.SET_NULL, null=True)


class Image(models.Model):
    Img = models.ImageField(upload_to='static_img/', null=True, blank=True)


class Good_Image(models.Model):
    Good = models.ForeignKey(Good, on_delete=models.SET_NULL, null=True)
    Image = models.ForeignKey(Image, on_delete=models.SET_NULL, null=True)


class System(models.Model):
    Status = models.PositiveSmallIntegerField()
