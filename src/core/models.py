from django.db import models
from users.models import User, Address, Motor
from shop.models import Product

CHARFIELD_MAXLENGTH = 50


class Transaction(models.Model):
    STATUS_CHOICES = (
        ('A', 'Active'),
        ('D', 'Deactive'),
    )
    TYPE_CHOICES = (
        ('S', 'Staff'),
        ('C', 'Customer'),
        ('M', 'Mechanic'),
    )
    # Maximum amount of wallet is 10^9 + 3 decimal places
    price = models.DecimalField(max_digits=13, decimal_places=3)
    time = models.DateTimeField(auto_now=False, auto_now_add=True)
    bankname = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # TODO: Check if maximum length of CardNumber is fine
    cardnumber = models.CharField(max_length=16)
    refrencenumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    issuenumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    terminalnumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # The following number will be randomly generated by our sevice
    transactionnumber = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    status = models.CharField(null=True, blank=True, choices=STATUS_CHOICES, max_length=CHARFIELD_MAXLENGTH)
    type = models.CharField(null=True, blank=True, choices=TYPE_CHOICES, max_length=CHARFIELD_MAXLENGTH)


class Request(models.Model):
    # StartDate will automatically set when an instance is created
    startdate = models.DateTimeField(auto_now=False, auto_now_add=True, blank=True, null=True)
    enddate = models.DateTimeField(auto_now=False, auto_now_add=True, blank=True, null=True)
    description = models.TextField()
    # Maximum amount of wallet is 10^9 + 3 decimal places
    totalprice = models.DecimalField(max_digits=13, decimal_places=3, blank=True, null=True)
    address = models.ForeignKey(Address, on_delete=models.SET_NULL, null=True, blank=True)
    mechanic = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    motor = models.ForeignKey(Motor, on_delete=models.SET_NULL, null=True, blank=True)
    goods = models.ManyToManyField(Product)
    services = models.ManyToManyField('Service')


class Service(models.Model):
    title = models.CharField(max_length=CHARFIELD_MAXLENGTH)
    # Maximum amount of wallet is 10^9 + 3 decimal places
    price = models.DecimalField(max_digits=13, decimal_places=3)
    # TODO: add field "available on" in order to specify motor type
    description = models.TextField()

    def __str__(self):
        return self.Title


class System(models.Model):
    status = models.PositiveSmallIntegerField()
